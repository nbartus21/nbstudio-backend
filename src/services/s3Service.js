import AWS from 'aws-sdk';

// Hasznos debugol√°si inform√°ci√≥
const debugEnabled = true;
const debugLog = (message, data) => {
  if (debugEnabled) {
    console.log(`üîπ S3 Service: ${message}`, data || '');
  }
};

// Konfig - az AWS hiteles√≠t√©si adatok a k√∂rnyezeti v√°ltoz√≥kb√≥l vagy a Netlifyb≈ël j√∂nnek
const S3_CONFIG = {
  accessKeyId: process.env.REACT_APP_AWS_S3_ACCESS_KEY_ID,
  secretAccessKey: process.env.REACT_APP_AWS_S3_SECRET_ACCESS_KEY,
  region: process.env.REACT_APP_AWS_S3_REGION || 'eu-central-1',
  bucket: process.env.REACT_APP_AWS_S3_BUCKET_NAME || 'nb-studio-client-files',
};

// Ellen≈ërizz√ºk, hogy a b√∂ng√©sz≈ëben vagy szerveren futunk
const isClient = typeof window !== 'undefined';

// S3 kliens inicializ√°l√°sa
let s3;

// S3 kliens inicializ√°l√°sa
const initS3Client = () => {
  if (!s3) {
    debugLog('Initializing S3 client', {
      region: S3_CONFIG.region,
      bucket: S3_CONFIG.bucket,
      environmentType: isClient ? 'browser' : 'server',
      hasCredentials: !!(S3_CONFIG.accessKeyId && S3_CONFIG.secretAccessKey)
    });
    
    const config = {
      accessKeyId: S3_CONFIG.accessKeyId,
      secretAccessKey: S3_CONFIG.secretAccessKey,
      region: S3_CONFIG.region
    };
    
    // Kliensoldalon be√°ll√≠tunk n√©h√°ny extra param√©tert
    if (isClient) {
      // N√∂velj√ºk a timeout-ot, mert a nagy f√°jlok felt√∂lt√©se id≈ëig√©nyes lehet
      config.httpOptions = {
        timeout: 300000 // 5 perc timeout
      };
    }
    
    s3 = new AWS.S3(config);
  }
  return s3;
};

/**
 * F√°jl felt√∂lt√©se S3-ba
 * @param {Object} fileData - A f√°jl adatai (name, content, stb.)
 * @returns {Promise<Object>} - A felt√∂lt√∂tt f√°jl adatai (key, s3url)
 */
export const uploadFileToS3 = async (fileData) => {
  // Inicializ√°ljuk az S3 klienst, ha m√©g nem t√∂rt√©nt meg
  const s3Client = initS3Client();
  
  try {
    debugLog('F√°jl felt√∂lt√©s el≈ëk√©sz√≠t√©se', {
      f√°jln√©v: fileData.name,
      m√©ret: fileData.size,
      t√≠pus: fileData.type
    });
    
    // A b√∂ng√©sz≈ëben a Base64 string tartalmazza a MIME t√≠pust is, ezt el kell t√°vol√≠tani
    let fileContent = fileData.content;
    if (fileContent.includes('base64')) {
      fileContent = fileContent.split('base64,')[1];
    }
    
    // Biztos√≠tjuk, hogy a Buffer kompatibilis m√≥don kezelj√ºk a tartalmat
    let binaryContent;
    if (isClient) {
      // B√∂ng√©sz≈ëben az atob f√ºggv√©nyt haszn√°ljuk a base64 dek√≥dol√°shoz
      try {
        const binary = atob(fileContent);
        const bytes = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
          bytes[i] = binary.charCodeAt(i);
        }
        binaryContent = bytes.buffer;
      } catch (error) {
        console.error('Hiba a Base64 dek√≥dol√°s sor√°n:', error);
        // Fallback: egyszer≈±en √°tadjuk a nyers Base64 stringet
        binaryContent = fileContent;
      }
    } else {
      // Szerveren a Buffer objektumot haszn√°ljuk
      binaryContent = Buffer.from(fileContent, 'base64');
    }
    
    // Normaliz√°ljuk a f√°jlnevet - √©kezeteket √©s speci√°lis karaktereket kezelj√ºk
    const normalizedFileName = fileData.name
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // √âkezetek elt√°vol√≠t√°sa
      .replace(/[^\w.\-]/g, '_'); // Speci√°lis karakterek cser√©je underscore-ra
    
    // Egyedi kulcs gener√°l√°sa a f√°jlnak - ez biztos√≠tja, hogy ne √≠rjuk fel√ºl a l√©tez≈ë f√°jlokat
    const uniquePrefix = Date.now().toString();
    const folder = fileData.projectId ? `projects/${fileData.projectId}/` : 'uploads/';
    const key = `${folder}${uniquePrefix}_${normalizedFileName}`;
    
    // S3 felt√∂lt√©si param√©terek
    const params = {
      Bucket: S3_CONFIG.bucket,
      Key: key,
      Body: binaryContent,
      ContentType: fileData.type || 'application/octet-stream',
      ContentDisposition: `inline; filename="${normalizedFileName}"`,
      ACL: 'public-read', // Fontos: nyilv√°nos olvas√°si jog, hogy b√°rki (m√°s b√∂ng√©sz≈ëk is) el√©rhess√©k
      Metadata: {
        'original-filename': normalizedFileName,
        'upload-date': new Date().toISOString(),
        'project-id': fileData.projectId || 'none',
        'uploaded-by': fileData.uploadedBy || 'unknown'
      }
    };
    
    debugLog('S3 felt√∂lt√©s ind√≠t√°sa', {
      bucket: S3_CONFIG.bucket,
      key: key,
      contentTypus: params.ContentType,
      metaadatok: params.Metadata
    });
    
    // F√°jl felt√∂lt√©se az S3-ba
    const startTime = Date.now();
    const uploadResult = await s3Client.upload(params).promise();
    const uploadDuration = Date.now() - startTime;
    
    // Gener√°ljuk az S3 URL-t
    const s3url = uploadResult.Location;
    
    debugLog('S3 felt√∂lt√©s befejezve', {
      s3url: s3url,
      key: key,
      felt√∂lt√©si_id≈ë: `${uploadDuration}ms`
    });
    
    return {
      key,
      s3url,
      uploadTime: uploadDuration
    };
  } catch (error) {
    console.error('‚ùå Hiba az S3 felt√∂lt√©s sor√°n:', error);
    throw error;
  }
};

/**
 * S3 URL gener√°l√°sa egy f√°jl objektumb√≥l
 * @param {Object} file - A f√°jl objektum
 * @returns {string} - Az S3 URL
 */
export const getS3Url = (file) => {
  // Ha m√°r van S3 URL a f√°jlban, haszn√°ljuk azt
  if (file.s3url) {
    return file.s3url;
  }
  
  // Ha van S3 kulcs, gener√°ljunk bel≈ële URL-t
  if (file.s3key) {
    const bucket = S3_CONFIG.bucket;
    const region = S3_CONFIG.region;
    return `https://${bucket}.s3.${region}.amazonaws.com/${file.s3key}`;
  }
  
  // Fallback - visszaadjuk a file.content-et, ha van
  if (file.content) {
    return file.content;
  }
  
  // Ha semmi nincs, amit haszn√°lhatn√°nk, √ºres stringet adunk vissza
  console.warn('Nem tal√°lhat√≥ let√∂lthet≈ë tartalom a f√°jlhoz:', file.name);
  return '';
};

/**
 * F√°jl t√∂rl√©se az S3-b√≥l (ritk√°n haszn√°ljuk, √°ltal√°ban csak logikai t√∂rl√©s van)
 * @param {string} key - A f√°jl S3 kulcsa
 * @returns {Promise<Object>} - A t√∂rl√©s eredm√©nye
 */
export const deleteFileFromS3 = async (key) => {
  const s3Client = initS3Client();
  
  try {
    debugLog('S3 f√°jl t√∂rl√©s k√©r√©se', { key });
    
    const params = {
      Bucket: S3_CONFIG.bucket,
      Key: key
    };
    
    const result = await s3Client.deleteObject(params).promise();
    
    debugLog('S3 f√°jl sikeresen t√∂r√∂lve', { key, result });
    return result;
  } catch (error) {
    console.error('‚ùå Hiba az S3 f√°jl t√∂rl√©se sor√°n:', error);
    throw error;
  }
};

export default {
  uploadFileToS3,
  getS3Url,
  deleteFileFromS3
}; 