import { api } from './auth';

// Hasznos debugol√°si inform√°ci√≥
const debugEnabled = true;
const debugLog = (message, data) => {
  if (debugEnabled) {
    console.log(`üîπ S3 Service (Kliens): ${message}`, data || '');
  }
};

// Konfig - Vite-kompatibilis k√∂rnyezeti v√°ltoz√≥k haszn√°lata (import.meta.env)
const S3_CONFIG = {
  bucketName: import.meta.env?.VITE_AWS_S3_BUCKET_NAME || 'nb-studio-client-files',
  region: import.meta.env?.VITE_AWS_S3_REGION || 'eu-central-1',
};

// Ellen≈ërizz√ºk, hogy a b√∂ng√©sz≈ëben vagy szerveren futunk
const isClient = typeof window !== 'undefined';

/**
 * F√°jl felt√∂lt√©se S3-ba - Kliens oldali implement√°ci√≥
 * @param {Object} fileData - A f√°jl adatai (name, content, stb.)
 * @returns {Promise<Object>} - A felt√∂lt√∂tt f√°jl adatai (key, s3url)
 */
export const uploadFileToS3 = async (fileData) => {
  try {
    debugLog('F√°jl felt√∂lt√©s el≈ëk√©sz√≠t√©se', {
      f√°jln√©v: fileData.name,
      m√©ret: fileData.size,
      t√≠pus: fileData.type
    });
    
    // K√©sz√≠t√ºnk egy helyi m√°solatot a fileData-r√≥l, hogy ne m√≥dos√≠tsuk az eredetit
    const fileInfo = { ...fileData };
    
    // A f√°jl tartalma √©s neve el≈ëk√©sz√≠t√©se
    if (!fileInfo.content) {
      throw new Error('Hi√°nyz√≥ f√°jl tartalom');
    }
    
    // Normaliz√°ljuk a f√°jlnevet a biztons√°g kedv√©√©rt - √©kezetek √©s speci√°lis karakterek kezel√©se
    const normalizedFileName = fileInfo.name
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // √âkezetek elt√°vol√≠t√°sa
      .replace(/[^\w.\-]/g, '_'); // Speci√°lis karakterek cser√©je underscore-ra
    
    debugLog('Normaliz√°lt f√°jln√©v:', normalizedFileName);
    
    // Egyedi azonos√≠t√≥ gener√°l√°sa a f√°jlhoz
    const uniqueId = `${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
    fileInfo.id = fileInfo.id || uniqueId;
    
    // Ha van projektID, felk√©sz√≠tj√ºk a projekt specifikus t√°rol√°sra
    if (fileInfo.projectId) {
      debugLog('F√°jl projekthez kapcsol√°sa:', fileInfo.projectId);
    }
    
    // K√∂zvetlen REST API h√≠v√°s helyett az api seg√©df√ºggv√©nyt haszn√°ljuk
    // Ami kezeli az authentik√°ci√≥t √©s a hibakezel√©st
    const startTime = Date.now();
    
    // A felt√∂lt√©st k√©t l√©p√©sben v√©gezz√ºk:
    // 1. A f√°jl adatainak elk√ºld√©se a backend API-nak
    // 2. A backend kezeli az S3 felt√∂lt√©st √©s visszaadja a megfelel≈ë URL-t
    
    debugLog('F√°jl adatok k√ºld√©se a backend API-nak');
    const projectEndpoint = fileInfo.projectId 
      ? `/api/projects/${fileInfo.projectId}/files`
      : '/api/files/upload';
      
    const response = await api.post(projectEndpoint, fileInfo);
    
    if (!response.ok) {
      const errorText = await response.text();
      debugLog('Hiba a f√°jl felt√∂lt√©sekor a szerverre:', errorText);
      throw new Error(`Szerver hiba: ${response.status} ${response.statusText}`);
    }
    
    // Feldolgozzuk a v√°laszt
    const responseData = await response.json();
    
    const uploadDuration = Date.now() - startTime;
    debugLog('F√°jl felt√∂lt√©se sikeres', {
      id≈ëtartam: `${uploadDuration}ms`,
      v√°lasz: responseData
    });
    
    // Kinyerj√ºk a f√°jl S3 adatait a v√°laszb√≥l
    const s3url = extractS3UrlFromResponse(responseData, fileInfo);
    const s3key = extractS3KeyFromResponse(responseData, fileInfo);
    
    // Ha nem tal√°lunk S3 URL-t, akkor haszn√°ljuk a content mez≈ët (fallback)
    if (!s3url && fileInfo.content) {
      debugLog('S3 URL nem tal√°lhat√≥ a v√°laszban, content mez≈ë haszn√°lata');
      return {
        key: fileInfo.id,
        s3url: fileInfo.content,
        uploadTime: uploadDuration
      };
    }
    
    return {
      key: s3key || fileInfo.id,
      s3url: s3url,
      uploadTime: uploadDuration
    };
  } catch (error) {
    console.error('‚ùå Hiba az S3 felt√∂lt√©s sor√°n:', error);
    throw error;
  }
};

/**
 * S3 URL gener√°l√°sa egy f√°jl objektumb√≥l
 * @param {Object} file - A f√°jl objektum
 * @returns {string} - Az S3 URL
 */
export const getS3Url = (file) => {
  // Ha m√°r van S3 URL a f√°jlban, haszn√°ljuk azt
  if (file.s3url) {
    return file.s3url;
  }
  
  // Ha van S3 kulcs, gener√°ljunk bel≈ële URL-t
  if (file.s3key) {
    const bucket = S3_CONFIG.bucketName;
    const region = S3_CONFIG.region;
    return `https://${bucket}.s3.${region}.amazonaws.com/${file.s3key}`;
  }
  
  // Fallback - visszaadjuk a file.content-et, ha van
  if (file.content) {
    return file.content;
  }
  
  // Ha semmi nincs, amit haszn√°lhatn√°nk, √ºres stringet adunk vissza
  console.warn('Nem tal√°lhat√≥ let√∂lthet≈ë tartalom a f√°jlhoz:', file.name);
  return '';
};

/**
 * F√°jl t√∂rl√©se az S3-b√≥l (logikai t√∂rl√©s)
 * @param {string} projectId - A projekt azonos√≠t√≥ja
 * @param {string} fileId - A f√°jl azonos√≠t√≥ja
 * @returns {Promise<Object>} - A t√∂rl√©s eredm√©nye
 */
export const deleteFileFromS3 = async (projectId, fileId) => {
  try {
    debugLog('F√°jl t√∂rl√©s kezdem√©nyez√©se', { projectId, fileId });
    
    const response = await api.delete(`/api/projects/${projectId}/files/${fileId}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`F√°jl t√∂rl√©si hiba: ${response.status} ${errorText}`);
    }
    
    const result = await response.json();
    debugLog('F√°jl sikeresen t√∂r√∂lve', result);
    
    return result;
  } catch (error) {
    console.error('‚ùå Hiba a f√°jl t√∂rl√©se sor√°n:', error);
    throw error;
  }
};

// Seg√©df√ºggv√©nyek

// S3 URL kinyer√©se a szerver v√°laszb√≥l
function extractS3UrlFromResponse(response, fileInfo) {
  // Ha a v√°lasz k√∂zvetlen√ºl tartalmazza az s3url mez≈ët
  if (response.s3url) {
    return response.s3url;
  }
  
  // Ha a v√°lasz a files t√∂mbben tartalmazza a f√°jlt
  if (response.files && Array.isArray(response.files)) {
    const file = response.files.find(f => f.id === fileInfo.id);
    if (file && file.s3url) {
      return file.s3url;
    }
  }
  
  // Ha a projekt objektumban a files t√∂mbben van
  if (response.files && Array.isArray(response.files)) {
    const file = response.files.find(f => f.id === fileInfo.id || f.name === fileInfo.name);
    if (file && file.s3url) {
      return file.s3url;
    }
  }
  
  // Pr√≥b√°ljuk megtal√°lni az adott nev≈± f√°jlt a projektben
  if (response.files && Array.isArray(response.files)) {
    // Leg√∫jabb f√°jl
    const latestFile = response.files.sort((a, b) => 
      new Date(b.uploadedAt) - new Date(a.uploadedAt)
    )[0];
    
    if (latestFile && latestFile.s3url) {
      return latestFile.s3url;
    }
  }
  
  // Nem tal√°ltunk S3 URL-t
  return null;
}

// S3 kulcs kinyer√©se a szerver v√°laszb√≥l
function extractS3KeyFromResponse(response, fileInfo) {
  // Logika hasonl√≥ az URL kinyer√©s√©hez
  if (response.s3key) {
    return response.s3key;
  }
  
  if (response.key) {
    return response.key;
  }
  
  // Pr√≥b√°ljuk megkeresni a files t√∂mbben
  if (response.files && Array.isArray(response.files)) {
    const file = response.files.find(f => f.id === fileInfo.id);
    if (file && file.s3key) {
      return file.s3key;
    }
  }
  
  // Alap√©rtelmezett kulcs gener√°l√°sa
  return `${fileInfo.projectId || 'uploads'}/${fileInfo.id}`;
}

export default {
  uploadFileToS3,
  getS3Url,
  deleteFileFromS3
}; 